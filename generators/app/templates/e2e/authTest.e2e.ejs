/* eslint-disable no-undef */
/* eslint-disable prettier/prettier */
import {element, by, waitFor, device} from 'detox';

const testingElements = require('./utils/testingElements');
const testingData = require('./utils/testingData');
const home = require('./utils/homeNavigation');
const login = require('./utils/login');
const signup = require('./utils/signup');
<%_ if(features.onboarding) { _%>
const onboarding = require('./utils/onboarding');
<%_ } _%>

beforeAll(async () => {
  await device.launchApp({newInstance: true});
});

beforeEach(async () => {
  await device.reloadReactNative();
});

describe('Login feature test', () => {

  <%_ if(features.onboarding) { _%>
  test('Should fill login form and go to onboarding', async () => {
  <%_ } else { _%>
  test('Should fill login form and go to home', async () => {
  <%_ } _%>    
    await login.typeEmailLogin(testingData.email);
    await login.typePasswordLogin(testingData.password);
    await login.pressLoginButton();
    <%_ if(features.onboarding) { _%>
    await waitFor(element(by.id(testingElements.footerLeftActionButton).withAncestor(by.id(testingElements.footerContainer)))).toBeVisible().withTimeout(10000);
    await onboarding.pressSkipButton();
    <%_ } _%>
    await waitFor(element(by.id(testingElements.logoutSubmitButton))).toBeVisible();
    await home.pressLogoutButton();
  });
});

describe('Signup feature test', () => {
  test('Should fill signup form and go to login view', async () => {
    await login.pressSignUpButton();
    await signup.typeNameSignup(testingData.firstName);
    await signup.typeSurnameSignup(testingData.surName);
    await signup.typeBirthdaySignup(testingData.birthDate);
    await signup.typeEmailSignup(testingData.email);
    await signup.typePasswordSignup(testingData.password);
    await signup.typePhoneNumberSignup(testingData.phoneNumber);
    await signup.pressSubmitButton();
    await signup.verifyErrorsNotVisible();
    await waitFor(element(by.id(testingElements.loginSubmitButton)))
      .toBeVisible().withTimeout(10000);
  });
});

describe('Login Errors Test', () => {

  test('should fill login form with wrong email and show error', async () => {
    await login.typeEmailLogin(testingData.invalidEmail);
    await login.pressLoginButton();
    await waitFor(element(by.id(testingElements.errorEmail))).toBeVisible().withTimeout(10000);
  });
  test('should fill login form with empty password and show error', async () => {
    await login.pressLoginButton();
    await waitFor(element(by.id(testingElements.errorPassword))).toBeVisible().withTimeout(10000);
  });

});

describe('Signup Errors Test', () => {

  test('Should show errors for required fields', async () => {
  await login.pressSignUpButton();
  await signup.pressSubmitButton();
  await waitFor(element(by.id(testingElements.errorName))).toBeVisible().withTimeout(10000);
  await waitFor(element(by.id(testingElements.errorSurname))).toBeVisible().withTimeout(10000);
  await waitFor(element(by.id(testingElements.errorBirthdate))).toBeVisible().withTimeout(10000);
  await waitFor(element(by.id(testingElements.errorEmail))).toBeVisible().withTimeout(10000);
  await waitFor(element(by.id(testingElements.errorPassword))).toBeVisible().withTimeout(10000);
  await device.pressBack();
  });

  test('Should fill signup form with errors in all fields and show an error', async () => {
  await login.pressSignUpButton();
  await signup.typeNameSignup(testingData.invalidFirstName);
  await signup.typeSurnameSignup(testingData.invalidSurname);
  await signup.typeBirthdaySignup('');
  await signup.typeEmailSignup(testingData.invalidEmail);
  await signup.typePasswordSignup(testingData.invalidPassword);
  await signup.typePhoneNumberSignup(testingData.invalidPhone);
  await signup.pressSubmitButton();
  await waitFor(element(by.id(testingElements.errorName))).toExist().withTimeout(10000);
  await waitFor(element(by.id(testingElements.errorSurname))).toExist().withTimeout(10000);
  await waitFor(element(by.id(testingElements.errorBirthdate))).toExist().withTimeout(10000);
  await waitFor(element(by.id(testingElements.errorEmail))).toExist().withTimeout(10000);
  await waitFor(element(by.id(testingElements.errorPassword))).toExist().withTimeout(10000);
  //await waitFor(element(by.id(elements.errorPhone))).toBeVisible().withTimeout(10000);; //pending validate type of input to show error
  await device.pressBack();
});

});
