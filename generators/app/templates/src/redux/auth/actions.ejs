import { createAsyncThunk } from '@reduxjs/toolkit';
<%_ if(features.onboarding) { _%>
import { AuthData } from 'interfaces/authInterfaces';
<%_ } _%>
import authService from 'services/auth';
<%_ if(features.onboarding) { _%>
import {
  setOnBoardingAccess,
  getOnBoardingAccess
} from 'services/OnBoardingService';
<%_ } _%>
import { createActionTypes } from 'redux/utils';

export const actionsTypes = createActionTypes(
  ['AUTH_INIT', <%_ if(features.onboarding) { _%>'HAS_ACCESS', <%_ } _%><%_ if(features.loginandsignup) { _%>'LOGIN', 'LOGOUT'<%_ } _%>],
  'auth'
);

const actionCreators = {
  init: createAsyncThunk(actionsTypes.AUTH_INIT, async () => {
    const currentUser = await authService.authSetup();
    const hasAccessOnBoarding = await getOnBoardingAccess();

    return { currentUser, hasAccessOnBoarding };
  }),
  <%_ if(features.loginandsignup) { _%>
  login: createAsyncThunk(actionsTypes.LOGIN, async (authData: AuthData) => {
    const response = await authService.login(authData);
    authService.setCurrentUser(response.data!);

    return { currentUser: response.data };
  }),
  logout: createAsyncThunk(actionsTypes.LOGOUT, async (_, { dispatch }) => {
    const response = await authService.logout();
    await authService.removeCurrentUser();
    <%_ if(features.onboarding) { _%>
    dispatch(actionCreators.setHasAccessOnBoarding(false));
    <%_ } _%>

    return { currentUser: response.data };
  }),
  <%_ } _%>
  <%_ if(features.onboarding) { _%>
  setHasAccessOnBoarding: createAsyncThunk(
    actionsTypes.HAS_ACCESS,
    async (value: boolean) => {
      await setOnBoardingAccess(value);

      return { hasAccessOnBoarding: value };
    }
  ),
  <%_ } _%>
  <%_ if(features.onboarding) { _%>
  socialLogin: createAsyncThunk(actionsTypes.LOGIN, async (token: any) => {
    const response = await authService.login(token);
    authService.setCurrentUser(response.data!);

    return { currentUser: response.data };
  })
  <%_ } _%>
};

export default actionCreators;
