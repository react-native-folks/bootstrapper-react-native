import React, { useEffect, useState, useCallback, useMemo } from 'react';
<%_ if(features.firebase) { _%>
import analytics from '@react-native-firebase/analytics';
<%_ } _%>
import { NavigationContainer, NavigationState } from '@react-navigation/native';
import { Provider as PaperProvider } from 'react-native-paper';
import { useAppTheme, ThemeContext, ThemeProperty } from 'hooks/theme';
import { CustomStatusBar } from 'app/components';
import { setAppThemePreference } from 'services/preferences';

import { navigationRef, getActiveRoute, getRoute } from './utils';
import Navigator from './navigator';

const AppNavigator = () => {
  const [routeName, setRouteName] = useState(null);
  const [appTheme, setTheme] = useAppTheme('system');
  useEffect(() => {
    setRouteName(getActiveRoute()?.name);
  }, []);

  const onStateChange = (state?: NavigationState) => {
    const previousRouteName = routeName;
    const currentRouteName = getRoute(state)?.name;
    if (previousRouteName !== currentRouteName) {
      <%_ if(features.firebase) { _%>
      analytics().logScreenView({ screen_class: currentRouteName, screen_name: currentRouteName });
      <%_ } _%>
      setRouteName(currentRouteName);
    }
  };

  const changeTheme = useCallback(
    (newTheme: ThemeProperty) => {
      setTheme(newTheme);
      setAppThemePreference(newTheme);
    },
    [setTheme]
  );

  const ThemePreferences = useMemo(
    () => ({
      changeTheme,
      appTheme
    }),
    [changeTheme, appTheme]
  );
  return (
    <ThemeContext.Provider value={ThemePreferences}>
      <PaperProvider theme={appTheme}>
        <NavigationContainer
          theme={appTheme}
          ref={navigationRef}
          onStateChange={onStateChange}>
          <CustomStatusBar routeName={routeName} />
          <Navigator />
        </NavigationContainer>
      </PaperProvider>
    </ThemeContext.Provider>
  );
};

export default AppNavigator;
