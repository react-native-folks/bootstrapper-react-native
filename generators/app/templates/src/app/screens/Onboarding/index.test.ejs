import React from 'react';
import { render, fireEvent } from 'react-native-testing-library';
<%_ if(features.statemanagement.recoil) { _%>
import { RecoilRoot } from 'recoil';
import onboardingServices from 'services/onboarding';
<%_ } _%>
<%_ if(features.statemanagement.redux) { _%>
import * as ReactRedux from 'react-redux';
<%_ } _%>

import { OnboardingContainer } from './';
import './i18n';

describe('Onboarding Screen', () => {
  let testMockFunction: any;

  const onboardingScreen = () => (
    <%_ if(features.statemanagement.recoil) { _%>
      <RecoilRoot>
        <OnboardingContainer />
      </RecoilRoot>
    <%_ } _%>
    <%_ if(features.statemanagement.redux) { _%>
      <OnboardingContainer />
    <%_ } _%>
  );

  <%_ if(features.statemanagement.redux) { _%>
  beforeEach(() => {
    testMockFunction = jest.fn();
    jest.spyOn(ReactRedux, 'useDispatch').mockReturnValue(testMockFunction);
  });
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  beforeEach(() => {
    testMockFunction = jest.fn();
    jest
      .spyOn(onboardingServices, 'setOnboardingAccess')
      .mockImplementation(testMockFunction);
  });
  <%_ } _%>

  afterEach(() => {
    jest.clearAllMocks();
  });

  <%_ if(features.statemanagement.recoil) { _%>
  it('setOnboardingAccess service should be called when first onboarding button is pressed', async () => {
  <%_ } _%>
  <%_ if(features.statemanagement.redux) { _%>
  it('dispatch should be called when first onboarding button is pressed', async () => {
  <%_ } _%>
    const { getByTestId } = render(onboardingScreen());
    const leftFooterButton = getByTestId('footer-left-action-button');
    fireEvent.press(leftFooterButton);
    expect(testMockFunction).toHaveBeenCalled();
  });
  <%_ if(features.statemanagement.recoil) { _%>
  it('setOnboardingAccerss service should be called after button pressed of the last screen', async () => {
  <%_ } _%>
  <%_ if(features.statemanagement.redux) { _%>
  it('dispatch should be called after button pressed of the last screen', async () => {
  <%_ } _%>
    const { getByTestId } = render(onboardingScreen());
    const rightFooterButton = getByTestId('footer-right-action-button');
    fireEvent.press(rightFooterButton); // first to second screen
    fireEvent.press(rightFooterButton); // second to third screen
    fireEvent.press(rightFooterButton); // third to skip
    expect(testMockFunction).toHaveBeenCalled();
  });
  <%_ if(features.statemanagement.recoil) { _%>
  it('setOnboardingAccerss service should be called after go to to second screen and then back to first and skip onboarding', async () => {
  <%_ } _%>
  <%_ if(features.statemanagement.redux) { _%>
  it('dispatch should be called after go to to second screen and then back to first and skip onboarding', async () => {
  <%_ } _%>
    const { getByTestId } = render(onboardingScreen());
    const leftFooterButton = getByTestId('footer-left-action-button');
    const rightFooterButton = getByTestId('footer-right-action-button');
    fireEvent.press(rightFooterButton); // first to second screen
    fireEvent.press(leftFooterButton); // second to first screen
    fireEvent.press(leftFooterButton); // left button to skip
    expect(testMockFunction).toHaveBeenCalled();
  });
});
