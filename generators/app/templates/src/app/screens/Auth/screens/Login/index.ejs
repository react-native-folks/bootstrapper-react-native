import React, { useCallback, useRef } from 'react';
import {
  ActivityIndicator,
  <%_ if(features.socialloginbuttons) { _%>
  Alert,
  <%_ } _%>
  Keyboard,
  TextInput as NativeTextInput,
  TouchableWithoutFeedback,
  View
} from 'react-native';
import { useForm } from 'react-hook-form';
<%_ if(features.statemanagement.redux) { _%>
import { useDispatch } from 'react-redux';
<%_ } _%>
<%_ if(features.statemanagement.recoil) { _%>
import { useRecoilState } from 'recoil';
import { currentUserState } from 'recoilState/auth/atoms';
import { useLazyFetch } from 'hooks/useFetch';
import authServices from 'services/auth';
<%_ } _%>
import { appScreensNavOptions } from 'app/navigation/config/screensOptions';
import { createStackNavigator } from '@react-navigation/stack';
import i18next from 'i18next';
import { useTheme } from 'hooks/theme';
import { 
  CustomButton,
  CustomText,
  TextInput,
  LoadableImage,
  <%_ if(features.socialButtons.facebook) { _%>FacebookButton,<%_ } _%>
  <%_ if(features.socialButtons.apple) { _%>AppleButton,<%_ } _%>
  <%_ if(features.socialButtons.google) { _%>GoogleButton,<%_ } _%>
  <%_ if(features.socialButtons.twitter) { _%>TwitterButton,<%_ } _%>
} from 'app/components';
import Routes from 'app/navigation/routes';
import { isAndroid } from 'constants/platform';
import { Navigation } from 'interfaces/navigation';
<%_ if(features.statemanagement.redux) { _%>
import { useSelector } from 'hooks/redux';
import { authActions } from 'redux/auth';
<%_ }_%>
import { FIELDS, LOGIN_INITIAL_VALUES } from 'app/screens/Auth/constants';
import {
  validationsWrapper,
  validateRequired,
  validateEmail
} from 'utils/validations';

import './i18n';

import styles from './styles';

export function Login({ navigation }: Navigation) {
  const theme = useTheme();
  const { control, handleSubmit, errors } = useForm();
  const passwordInputRef = useRef<NativeTextInput>(null);
  <%_ if(features.statemanagement.redux) { _%>
  const dispatch = useDispatch();
  const loading = useSelector(state => state.auth.loading);
  const hasLoginError = useSelector(state => !!state.auth.error);
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  const [, setCurrentUser] = useRecoilState(currentUserState);
  const [, loading, authError, login] = useLazyFetch({
    request: authServices.login,
    withPostSuccess: async (data: any) => {
      await authServices.setCurrentUser(data);
      setCurrentUser(data);
    }
  });
  const hasLoginError = !!authError;
  <%_ } _%>

  <%_ if(features.statemanagement.redux) { _%>
  const handleLogin: (values: any) => void = useCallback(
    values => {
      Keyboard.dismiss();
      if (!Object.keys(errors).length) dispatch(authActions.login(values));
    },
    [dispatch, errors]
  );
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  const handleLogin: (values: any) => void = useCallback(
    values => {
      Keyboard.dismiss();
      if (!Object.keys(errors).length) login(values);
    },
    [errors, login]
  );
  <%_ } _%>

  <%_ if(features.socialloginbuttons) { _%>
  <%_ if(features.statemanagement.redux) { _%>
  const handleSocialLogin = (token: any) => dispatch(authActions.socialLogin(token));
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  const handleSocialLogin = (token: any) => login(token);
  <%_ } _%>

  <%_ } _%>
  const handleGoToSignUp = () => navigation.navigate(Routes.SignUp);

  return (
    <TouchableWithoutFeedback testID="dismiss-keyboard-touchable" onPress={Keyboard.dismiss}>
      <View testID="login-screen-container-view" style={styles.container}>
        <View testID="form-view-container" style={styles.form}>
          <LoadableImage
            testID="app-icon-image-loader"
            url={
              'https://upload.wikimedia.org/wikipedia/commons/9/9f/MahisoftLogo.png'
            }            
            style={styles.logo}
          />
          <TextInput
            control={control}
            name={FIELDS.email}
            rules={{
              validate: validationsWrapper([validateRequired, validateEmail])
            }}
            defaultValue={LOGIN_INITIAL_VALUES[FIELDS.email]}
            label={i18next.t('LOGIN:MAIL')}
            placeholder={i18next.t('LOGIN:MAIL_PLACEHOLDER')}
            keyboardType={'email-address'}
            autoCapitalize={'none'}
            error={errors[FIELDS.email]}
            errorMessage={errors[FIELDS.email]?.message}
            labelTestID="input-title-email"
            errorTestID="input-error-email"
            returnKeyType="next"
            blurOnSubmit={false}
            onSubmitEditing={() => passwordInputRef!.current?.focus()}
            autoCorrect={false}
          />
          <TextInput
            ref={passwordInputRef}
            control={control}
            name={FIELDS.password}
            rules={{ validate: validateRequired }}
            defaultValue={LOGIN_INITIAL_VALUES[FIELDS.password]}
            label={i18next.t('LOGIN:PASSWORD')}
            errorMessage={errors[FIELDS.password]?.message}
            labelTestID="input-title-password"
            errorTestID="input-error-password"
            secureTextEntry
            keyboardType={isAndroid ? 'visible-password' : 'ascii-capable'}
            returnKeyType="done"
            autoCorrect={false}
          />
          {hasLoginError && (
            <CustomText testID="login-error-message" error center>
              {i18next.t('LOGIN:LOGIN_FAILURE')}
            </CustomText>
          )}
        </View>
        <CustomButton
          testID="submit-button"
          primary
          radius={3}
          onPress={handleSubmit(handleLogin)}
          style={styles.formButton}
          title={i18next.t('LOGIN:LOG_IN')}
          disabled={hasLoginError}
        />
          <%_ if(features.socialButtons.facebook) { _%>
        <FacebookButton
          onSuccess={handleSocialLogin}
          onError={error => Alert.alert('ERROR', error)}
        />
          <%_ } _%>
          <%_ if(features.socialButtons.apple) { _%>
        <AppleButton
          onSuccess={handleSocialLogin}
          onError={error => Alert.alert('ERROR', error)}
        />
        <%_ } _%>
        <%_ if(features.socialButtons.google) { _%>
        <GoogleButton
          onSuccess={handleSocialLogin}
          onError={error => Alert.alert('ERROR', error)}
        />
        <%_ } _%>
        <%_ if(features.socialButtons.twitter) { _%>
        <TwitterButton
          onSuccess={handleSocialLogin}
          onError={error => Alert.alert('ERROR', error)}
        />
        <%_ } _%>
        <CustomButton
          testID="signup-button"
          borderless
          onPress={handleGoToSignUp}
          style={styles.formButton}
          title={i18next.t('LOGIN:SIGN_UP')}
        />
        <ActivityIndicator
          testID="activity-indicator-screen"
          animating={loading}
          color={theme.colors.accent}
        />      
      </View>
    </TouchableWithoutFeedback>
  );
}

const Stack = createStackNavigator();

const LoginScreen = () => (
  <Stack.Screen
    name={Routes.Login}
    component={Login}
    options={appScreensNavOptions[Routes.Login]}
  />
);

export default LoginScreen;
