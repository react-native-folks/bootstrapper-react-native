import animations from 'constants/animations';
import { isAndroid, isIos } from 'constants/platform';
import React, { useCallback, useRef, useEffect } from 'react';
import {
  ActivityIndicator,
  <%_ if(features.socialloginbuttons) { _%>
  Alert,
  <%_ } _%>
  Keyboard,
  KeyboardAvoidingView,
  KeyboardEvent,
  TextInput as NativeTextInput,
  TouchableWithoutFeedback,
  View
} from 'react-native';
import Animated, {
  useSharedValue,
  withSpring,
  useAnimatedStyle
} from 'react-native-reanimated';
import { useForm } from 'react-hook-form';
<%_ if(features.statemanagement.redux) { _%>
import { useDispatch } from 'react-redux';
<%_ } _%>
<%_ if(features.statemanagement.recoil) { _%>
import { useRecoilState } from 'recoil';
import { currentUserState } from 'recoilState/auth/atoms';
import { useLazyFetch } from 'hooks/useFetch';
import authServices from 'services/auth';
<%_ } _%>
import { appScreensNavOptions } from 'app/navigation/config/screensOptions';
import { createStackNavigator } from '@react-navigation/stack';
import i18next from 'i18next';
import { useTheme } from 'hooks/theme';
import { 
  Button,
  LoadableImage,
  TextInput,
  Text,
  <%_ if(features.socialloginbuttons){ _%>SocialButton,<%_ } _%>
} from 'app/components';
<%_ if(features.socialloginbuttons){ _%>
import { socialNetworks } from 'interfaces/socials';
<%_ } _%>
import Routes from 'app/navigation/routes';
import { Navigation } from 'interfaces/navigation';
<%_ if(features.statemanagement.redux) { _%>
import { useSelector } from 'hooks/redux';
import { authActions } from 'redux/auth';
<%_ }_%>
import { FIELDS, LOGIN_INITIAL_VALUES } from 'app/screens/Auth/constants';
import {
  validationsWrapper,
  validateRequired,
  validateEmail
} from 'utils/validations';

import './i18n';

import styles from './styles';

export function Login({ navigation }: Navigation) {
  const theme = useTheme();
  const {
    control,
    handleSubmit,
    formState: { errors }
  } = useForm();
  const passwordInputRef = useRef<NativeTextInput>(null);
  const keyboardScale = useSharedValue(0);

  const signUpAnimatedStyles = useAnimatedStyle(() => ({
    opacity:
      keyboardScale.value === 0
        ? withSpring(1, animations.iosDefault)
        : withSpring(0, animations.iosDefault)
  }));

    useEffect(() => {
    const showAction = isIos ? 'keyboardWillShow' : 'keyboardDidShow';
    const hideAction = isIos ? 'keyboardWillHide' : 'keyboardDidHide';

    const showKeyboard = (e: KeyboardEvent) => {
      keyboardScale.value = e.endCoordinates.height;
    };
    const hideKeyboard = () => {
      keyboardScale.value = 0;
    };

    Keyboard.addListener(showAction, showKeyboard);
    Keyboard.addListener(hideAction, hideKeyboard);

    return () => {
      Keyboard.removeListener(showAction, showKeyboard);
      Keyboard.removeListener(hideAction, hideKeyboard);
    };
  }, [keyboardScale]);

  <%_ if(features.statemanagement.redux) { _%>
  const dispatch = useDispatch();
  const loading = useSelector(state => state.auth.loading);
  const hasLoginError = useSelector(state => !!state.auth.error);
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  const [, setCurrentUser] = useRecoilState(currentUserState);
  const [, loading, authError, login] = useLazyFetch({
    request: authServices.login,
    withPostSuccess: async (data: any) => {
      await authServices.setCurrentUser(data);
      setCurrentUser(data);
    }
  });
  const hasLoginError = !!authError;
  <%_ } _%>

  <%_ if(features.statemanagement.redux) { _%>
  const handleLogin: (values: any) => void = useCallback(
    values => {
      Keyboard.dismiss();
      if (!Object.keys(errors).length) dispatch(authActions.login(values));
    },
    [dispatch, errors]
  );
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  const handleLogin: (values: any) => void = useCallback(
    values => {
      Keyboard.dismiss();
      if (!Object.keys(errors).length) login(values);
    },
    [errors, login]
  );
  <%_ } _%>

  <%_ if(features.socialloginbuttons) { _%>
  <%_ if(features.statemanagement.redux) { _%>
  const handleSocialLogin = (token: any) => dispatch(authActions.socialLogin(token));
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  const handleSocialLogin = (token: any) => login(token);
  <%_ } _%>

  <%_ } _%>
  const handleGoToSignUp = () =>
    keyboardScale.value === 0 ? navigation.navigate(Routes.SignUp) : undefined;

  return (
    <KeyboardAvoidingView
      behavior={isIos ? 'padding' : 'height'}
      style={styles.container}>
      <TouchableWithoutFeedback
        testID="dismiss-keyboard-touchable"
        onPress={Keyboard.dismiss}>
        <View testID="login-screen-container-view" style={styles.container}>
          <View style={styles.logoContainer}>
            <LoadableImage
              testID="app-icon-image-loader"
              url={
                'https://upload.wikimedia.org/wikipedia/commons/9/9f/MahisoftLogo.png'
              }
              style={styles.logo}
            />
          </View>
          <View testID="form-view-container" style={styles.form}>
            <TextInput
              autoCapitalize={'none'}
              autoCorrect={false}
              blurOnSubmit={false}
              control={control}
              defaultValue={LOGIN_INITIAL_VALUES[FIELDS.email]}
              error={errors[FIELDS.email]}
              errorMessage={errors[FIELDS.email]?.message}
              errorTestID="input-error-email"
              keyboardType={'email-address'}
              label={i18next.t('LOGIN:MAIL')}
              labelTestID="input-title-email"
              name={FIELDS.email}
              onSubmitEditing={() => passwordInputRef!.current?.focus()}
              placeholder={i18next.t('LOGIN:MAIL_PLACEHOLDER')}
              returnKeyType="next"
              rules={{
                validate: validationsWrapper([validateRequired, validateEmail])
              }}
            />
            <TextInput
              autoCorrect={false}
              blurOnSubmit={false}
              control={control}
              defaultValue={LOGIN_INITIAL_VALUES[FIELDS.password]}
              errorMessage={errors[FIELDS.password]?.message}
              errorTestID="input-error-password"
              keyboardType={isAndroid ? 'visible-password' : 'ascii-capable'}
              label={i18next.t('LOGIN:PASSWORD')}
              labelTestID="input-title-password"
              name={FIELDS.password}
              onSubmitEditing={handleSubmit(handleLogin)}
              ref={passwordInputRef}
              returnKeyType="go"
              rules={{ validate: validateRequired }}
              secureTextEntry
            />
            {hasLoginError && (
              <Text testID="login-error-message" error center>
                {i18next.t('LOGIN:LOGIN_FAILURE')}
              </Text>
            )}
            <Button
              testID="submit-button"
              onPress={handleSubmit(handleLogin)}
              title={i18next.t('LOGIN:LOG_IN')}
              disabled={hasLoginError}
              style={styles.loginButton}
              contentStyle={styles.loginButtonContent}
            />
            <%_ if(features.socialloginbuttons) { _%>
            <Text accent style={styles.socialsLabel}>
              {i18next.t('LOGIN:SOCIAL_LOGIN')}
            </Text>
            <View style={styles.socialButtonsContainer}>
              <%_ if(features.socialButtons.facebook) { _%>
              <SocialButton
                  socialNetwork={socialNetworks.FACEBOOK}
                  onSuccess={handleSocialLogin}
                  onError={error => Alert.alert('ERROR', error)}
                />
                <%_ } _%>
                <%_ if(features.socialButtons.twitter) { _%>
              <SocialButton
                  socialNetwork={socialNetworks.TWITTER}
                  onSuccess={handleSocialLogin}
                  onError={error => Alert.alert('ERROR', error)}
                />
              <%_ } _%>
              <%_ if(features.socialButtons.google) { _%>
              <SocialButton
                  socialNetwork={socialNetworks.GOOGLE}
                  onSuccess={handleSocialLogin}
                  onError={error => Alert.alert('ERROR', error)}
                />
              <%_ } _%>
              <%_ if(features.socialButtons.apple) { _%>
              <SocialButton
                  socialNetwork={socialNetworks.APPLE}
                  onSuccess={handleSocialLogin}
                  onError={error => Alert.alert('ERROR', error)}
                />
              <%_ } _%>
            </View>
            <%_ } _%>
            <Animated.View style={signUpAnimatedStyles}>    
              <Button
                uppercase={false}
                mode={'text'}
                testID="signup-button"
                onPress={handleGoToSignUp}
                style={styles.signUpButton}
                accentLabel
                title={i18next.t('LOGIN:SIGN_UP')}
              />
              <ActivityIndicator
                testID="activity-indicator-screen"
                animating={loading}
                color={theme.colors.accent}
              />
            </Animated.View>
          </View>
        </View>
      </TouchableWithoutFeedback>
    </KeyboardAvoidingView>
  );
}

const Stack = createStackNavigator();

const LoginScreen = () => (
  <Stack.Screen
    name={Routes.Login}
    component={Login}
    options={appScreensNavOptions[Routes.Login]}
  />
);

export default LoginScreen;
