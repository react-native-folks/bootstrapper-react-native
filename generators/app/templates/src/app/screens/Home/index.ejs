import React, { <%_ if(features.loginandsignup) { _%>useContext, <%_ } _%><%_ if(features.loginandsignup && features.statemanagement.redux) { _%>useCallback, <%_ } _%> } from 'react';
import { Alert, View } from 'react-native';
import i18next from 'i18next';
import Routes from 'app/navigation/routes';
<%_ if(features.tabs) { _%>
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
<%_ } else { _%>
<%_ if(features.drawer) { _%>
import { createDrawerNavigator } from '@react-navigation/drawer';
<%_ } else { _%>
import { createStackNavigator } from '@react-navigation/stack';
<%_ } _%>
<%_ } _%>
<%_ if(features.loginandsignup) { _%>
  import { ThemeContext } from 'hooks/theme';
<%_ if(features.statemanagement.redux) { _%>
import { useDispatch } from 'react-redux';
import { authActions } from 'redux/auth';
<%_ } _%>
<%_ if(features.statemanagement.recoil) { _%>
import { useRecoilState } from 'recoil';
import { currentUserState } from 'recoilState/auth/atoms';
import { useLazyFetch } from 'hooks/useFetch';
import authServices from 'services/auth';
<%_ } _%>
<%_ } _%>
<%_ if(features.googlemaps) { _%>
import { Navigation } from 'interfaces/navigation';
<%_ } _%>
import { CustomShadowView, Text, Button } from 'app/components';
import { ThemeProperty } from 'interfaces/theme';

import ThemeSelector from './components/ThemeSelector';
import styles from './styles';
import './i18n';

function Home(<%_ if(features.googlemaps) { _%>{ navigation }: Navigation<%_ } _%>) {
<%_ if(features.loginandsignup) { _%>
  const { changeTheme } = useContext(ThemeContext);
  <%_ if(features.statemanagement.redux) { _%>
  const dispatch = useDispatch();
  const handleLogout = useCallback(() => {
    dispatch(authActions.logout());
    changeTheme(ThemeProperty.SYSTEM);
  }, [dispatch, changeTheme]);
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  const [, setCurrentUser] = useRecoilState(currentUserState);
  const [, , , logout] = useLazyFetch({
    request: authServices.logout,
    withSuccessSelector: () => {
      setCurrentUser(null);
      authServices.removeCurrentUser();
      changeTheme(ThemeProperty.SYSTEM);
    }
  });
  
  const handleLogout = () => logout(null);
  <%_ } _%>
<%_ } _%>

  return (
    <View testID="screen-home-container-view" style={styles.container}>
      <CustomShadowView testID="buttons-shadow-container" strong style={styles.home}>
        <Text testID="welcome-message-text" blue>{i18next.t('HOME:HI')}</Text>
        <Button
          testID="alert-message-long-press-button"
          onPress={() =>
            Alert.alert(
              i18next.t('HOME:ALERT_TITLE'),
              i18next.t('HOME:ALERT_MESSAGE')
            )
          }
          onLongPress={() =>
            Alert.alert(
              i18next.t('HOME:ALERT_TITLE'),
              i18next.t('HOME:ALERT_MESSAGE_LONG')
            )
          }
          title={i18next.t('HOME:BUTTON_TITLE_LONG')}
          style={styles.button}
        />
      <%_ if(features.googlemaps) { _%>
        <Button
          testID="goto-maps-view-button"
          primary
          onPress={() => navigation.navigate(Routes.MapView)}
          title={i18next.t('HOME:GO_TO_MAP')}
          style={styles.button}
        />
      <%_ } _%>
      <%_ if(features.loginandsignup) { _%>
        <Button
          testID="logout-button"
          primary
          onPress={handleLogout}
          title={i18next.t('HOME:LOGOUT')}
          style={styles.button}
          contentStyle={styles.logoutButton}
        />
      <%_ } _%>
      </CustomShadowView>
      <ThemeSelector />
    </View>
  );
}

<%_ if(features.tabs) { _%>
const Tab = createBottomTabNavigator();

export const TabHomeOne = () => (
  <Tab.Screen name={Routes.Tab1} component={Home} />
);

export const TabHomeTwo = () => (
  <Tab.Screen name={Routes.Tab2} component={Home} />
);
<%_ } else { _%>
<%_ if(features.drawer) { _%>
const Drawer = createDrawerNavigator();

const HomeScreen = () => (
  <Drawer.Screen name={Routes.Home} component={Home} />
);
<%_ } else { _%>
const Stack = createStackNavigator();

const HomeScreen = () => (
  <Stack.Screen name={Routes.Home} component={Home} />
);
<%_ } _%>
export default HomeScreen;

<%_ } _%>
