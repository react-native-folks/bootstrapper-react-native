import React, { <%_ if(features.loginandsignup && features.statemanagement.redux) { _%>useCallback, <%_ } _%> } from 'react';
import { Alert, View } from 'react-native';
import i18next from 'i18next';
import Routes from 'app/navigation/routes';
<%_ if(features.tabs) { _%>
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
<%_ } else { _%>
<%_ if(features.drawer) { _%>
import { createDrawerNavigator } from '@react-navigation/drawer';
<%_ } else { _%>
import { createStackNavigator } from '@react-navigation/stack';
<%_ } _%>
<%_ } _%>
<%_ if(features.loginandsignup) { _%>
<%_ if(features.statemanagement.redux) { _%>
import { useDispatch } from 'react-redux';
import { authActions } from 'redux/auth';
<%_ } _%>
<%_ if(features.statemanagement.recoil) { _%>
import { useRecoilState } from 'recoil';
import { currentUserState } from 'recoilState/auth/atoms';
import { useLazyFetch } from 'hooks/useFetch';
import authServices from 'services/auth';
<%_ } _%>
<%_ } _%>
<%_ if(features.googlemaps) { _%>
import { Navigation } from 'interfaces/navigation';
<%_ } _%>
import { CustomShadowView, CustomText, CustomButton } from 'app/components';

import './i18n';
import styles from './styles';

function Home(<%_ if(features.googlemaps) { _%>{ navigation }: Navigation<%_ } _%>) {
  <%_ if(features.loginandsignup) { _%>
  <%_ if(features.statemanagement.redux) { _%>
  const dispatch = useDispatch();
  const handleLogout = useCallback(() => dispatch(authActions.logout()), [dispatch]);
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  const [, setCurrentUser] = useRecoilState(currentUserState);
  const [, , , logout] = useLazyFetch({
    request: authServices.logout,
    withSuccessSelector: () => {
      setCurrentUser(null);
      authServices.removeCurrentUser();
    }
  });
  
  const handleLogout = () => logout(null);
  <%_ } _%>
  <%_ } _%>

  return (
    <View style={styles.container}>
      <CustomShadowView strong style={styles.home}>
        <CustomText blue>{i18next.t('HOME:HI')}</CustomText>
        <CustomButton
          onPress={() =>
            Alert.alert(
              i18next.t('HOME:ALERT_TITLE'),
              i18next.t('HOME:ALERT_MESSAGE')
            )
          }
          title={i18next.t('HOME:BUTTON_TITLE')}
        />
        <CustomButton
          onPress={() =>
            Alert.alert(
              i18next.t('HOME:ALERT_TITLE'),
              i18next.t('HOME:ALERT_MESSAGE')
            )
          }
          onLongPress={() =>
            Alert.alert(
              i18next.t('HOME:ALERT_TITLE'),
              i18next.t('HOME:ALERT_MESSAGE_LONG')
            )
          }
          onPressIn={() => console.warn('Press In Detection')}
          title={i18next.t('HOME:BUTTON_TITLE_LONG')}
        />
        <CustomButton onPress={() => {}}>
          {({ pressed }) => (
            <CustomText white>{pressed ? ': O' : ': D'}</CustomText>
          )}
        </CustomButton>
        <%_ if(features.googlemaps) { _%>
        <CustomButton
          onPress={() => navigation.navigate(Routes.MapView)}
          title={i18next.t('HOME:GO_TO_MAP')}
          />
        <%_ } _%>
    <%_ if(features.loginandsignup) { _%>
      <CustomButton onPress={handleLogout} green title={i18next.t('HOME:LOGOUT')} style={styles.logout} />
    <%_ } _%>
      </CustomShadowView>
    </View>
  );
}

<%_ if(features.tabs) { _%>
const Tab = createBottomTabNavigator();

export const TabHomeOne = () => (
  <Tab.Screen name={Routes.Tab1} component={Home} />
);

export const TabHomeTwo = () => (
  <Tab.Screen name={Routes.Tab2} component={Home} />
);
<%_ } else { _%>
<%_ if(features.drawer) { _%>
const Drawer = createDrawerNavigator();

const HomeScreen = () => (
  <Drawer.Screen name={Routes.Home} component={Home} />
);
<%_ } else { _%>
const Stack = createStackNavigator();

const HomeScreen = () => (
  <Stack.Screen name={Routes.Home} component={Home} />
);
<%_ } _%>
export default HomeScreen;

<%_ } _%>
