import React, { useEffect } from 'react';
<%_ if(features.statemanagement.recoil) { _%>
import { useRecoilState } from 'recoil';
import { setupSelector } from 'recoilState/auth/selectors';
<%_ if(features.onboarding) { _%>
import onboardingServices from 'services/onboarding';
<%_ } _%>
<%_ if(features.loginandsignup) { _%>
import authServices from 'services/auth';
<%_ } _%>
<%_ } _%>
<%_ if(features.statemanagement.redux) { _%>
import { useDispatch } from 'react-redux';
import { useSelector } from 'hooks/redux';
<%_ } _%>
import Reactotron from 'reactotron-react-native';
import SplashScreen from 'react-native-splash-screen';
import AppNavigator from 'app/navigation/index';
import { apiSetup } from 'config/api';
<%_ if(features.pushnotifications) { _%>
import { subscribeToMessagingService } from 'services/notifications';
<%_ } _%>
<%_ if(features.statemanagement.redux) { _%>
import { authActions } from 'redux/auth';
<%_ } _%>

import LoadingView from './components/LoadableView';
import './i18n';

const App = () => {
  <%_ if(features.statemanagement.recoil) { _%>
  const [initialLoading, setupAppData] = useRecoilState(setupSelector);
  <%_ } _%>
  <%_ if(features.statemanagement.redux) { _%>
  const dispatch = useDispatch();
  const initialLoading = useSelector(state => state.auth.initialLoading);
  <%_ } _%>
  useEffect(() => {
    SplashScreen.hide();
  }, []);

  useEffect(() => {
    <%_ if(features.pushnotifications) { _%>
    subscribeToMessagingService();
    <%_ } _%>
    apiSetup();
    <%_ if(features.statemanagement.recoil) { _%>
    async function appSetup() {
      const appData: any = {};
      <%_ if(features.loginandsignup) { _%>
      appData.currentUser = await authServices.authSetup();
      <%_ } _%>
      <%_ if(features.onboarding) { _%>
      appData.hasAccessOnboarding = await onboardingServices.getOnboardingAccess();
      <%_ } _%>
      setupAppData(appData);
    }
    appSetup();
    <%_ } _%>
    <%_ if(features.statemanagement.redux) { _%>
    dispatch(authActions.init());
    <%_ } _%>
  <%_ if(features.statemanagement.redux) { _%>
  }, [dispatch]);
  <%_ } _%>
  <%_ if(features.statemanagement.recoil) { _%>
  }, [setupAppData]);
  <%_ } _%>

  return initialLoading ? <LoadingView isLoading /> : <AppNavigator />
};

const MyAppWithOverlay = __DEV__ ? Reactotron.overlay(App) : App;

export default MyAppWithOverlay;
